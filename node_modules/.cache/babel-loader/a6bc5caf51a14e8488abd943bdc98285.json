{"ast":null,"code":"import Web3 from 'web3'; //const web3 = new Web3(window.web3.currentProvider());\n////var Web3 = require('web3');\n\nvar web3 = new Web3();\n\nconst getData = async () => {\n  const web3 = new Web3(Web3.givenProvider);\n  const network = await web3.eth.net.getNetworkType();\n  await window.ethereum.enable();\n  const accounts = await web3.eth.getAccounts();\n  setAccount(accounts[0]);\n  console.log(\"TCL: getData -> network\", network);\n  console.log(\"TCL: getData -> accounts\", accounts);\n};\n\nwindow.addEventListener(\"load\", async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable();\n    } catch (error) {// User denied account access...\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      window.web3 = new Web3(web3.currentProvider);\n    } // Non-dapp browsers...\n    else {\n        console.log(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n      }\n});\nexport default web3;","map":{"version":3,"sources":["/Users/penghaoen2/Solidity/lottery-react/src/web3.js"],"names":["Web3","web3","getData","givenProvider","network","eth","net","getNetworkType","window","ethereum","enable","accounts","getAccounts","setAccount","console","log","addEventListener","error","currentProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CACA;AAEA;;AACA,IAAIC,IAAI,GAAG,IAAID,IAAJ,EAAX;;AAGA,MAAME,OAAO,GAAG,YAAY;AAC1B,QAAMD,IAAI,GAAG,IAAID,IAAJ,CAASA,IAAI,CAACG,aAAd,CAAb;AACA,QAAMC,OAAO,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,GAAT,CAAaC,cAAb,EAAtB;AACA,QAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACA,QAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACI,GAAL,CAASO,WAAT,EAAvB;AACAC,EAAAA,UAAU,CAACF,QAAQ,CAAC,CAAD,CAAT,CAAV;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCX,OAAvC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCJ,QAAxC;AACD,CARD;;AAUAH,MAAM,CAACQ,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,MAAIR,MAAM,CAACC,QAAX,EAAqB;AACnBD,IAAAA,MAAM,CAACP,IAAP,GAAc,IAAID,IAAJ,CAASQ,MAAM,CAACC,QAAhB,CAAd;;AACA,QAAI;AACF;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AAED,KAJD,CAIE,OAAOO,KAAP,EAAc,CACd;AACD;AACF,GATD,CAUA;AAVA,OAWK,IAAIT,MAAM,CAACP,IAAX,EAAiB;AACpBO,MAAAA,MAAM,CAACP,IAAP,GAAc,IAAID,IAAJ,CAASC,IAAI,CAACiB,eAAd,CAAd;AACD,KAFI,CAGL;AAHK,SAIA;AACHJ,QAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACD;AACF,CApBD;AAsBA,eAAed,IAAf","sourcesContent":["import Web3 from 'web3';\n//const web3 = new Web3(window.web3.currentProvider());\n\n////var Web3 = require('web3');\nvar web3 = new Web3();\n\n\nconst getData = async () => {\n  const web3 = new Web3(Web3.givenProvider);\n  const network = await web3.eth.net.getNetworkType();\n  await window.ethereum.enable();\n  const accounts = await web3.eth.getAccounts();\n  setAccount(accounts[0]);\n  console.log(\"TCL: getData -> network\", network);\n  console.log(\"TCL: getData -> accounts\", accounts);\n};\n\nwindow.addEventListener(\"load\", async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.enable();\n\n    } catch (error) {\n      // User denied account access...\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    window.web3 = new Web3(web3.currentProvider);\n  }\n  // Non-dapp browsers...\n  else {\n    console.log(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n  }\n});\n\nexport default web3;"]},"metadata":{},"sourceType":"module"}